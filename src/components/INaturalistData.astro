---
interface Props {
  perPage?: number;
  taxonId?: number;
  searchType?: 'general' | 'species';
}

const { perPage = 5, taxonId, searchType = 'general' } = Astro.props;
---

<div class="inaturalist-container">
  <input type="text" id="search-input" placeholder={searchType === 'species' ? "Search species..." : "Search observations..."}>
  <button id="search-button">Search</button>
  <div id="inaturalist-data" data-per-page={perPage} data-taxon-id={taxonId} data-search-type={searchType}>
    Enter a search term to view observations.
  </div>
</div>

<div id="image-modal" class="modal">
  <span class="close">&times;</span>
  <a class="prev">&#10094;</a>
  <a class="next">&#10095;</a>
  <img class="modal-content" id="modal-image">
  <div id="modal-caption"></div>
  <div id="modal-wiki-link"></div>
  <div id="modal-thumbnails"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    interface Observation {
      id: number;
      species_guess: string | null;
      observed_on: string;
      photos: { url: string }[];
      taxon?: {
        name: string;
        preferred_common_name: string;
        wikipedia_url: string | null;
      };
    }

    const container = document.getElementById('inaturalist-data');
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchButton = document.getElementById('search-button');
    const modal = document.getElementById('image-modal');
    const modalImg = document.getElementById('modal-image') as HTMLImageElement;
    const captionText = document.getElementById('modal-caption');
    const wikiLinkContainer = document.getElementById('modal-wiki-link');
    const modalThumbnails = document.getElementById('modal-thumbnails');
    const closeBtn = document.getElementsByClassName('close')[0] as HTMLElement;
    const prevBtn = document.querySelector('.prev') as HTMLElement;
    const nextBtn = document.querySelector('.next') as HTMLElement;

    let currentObservationIndex = 0;
    let currentImageIndex = 0;
    let observations: Observation[] = [];

    if (container && searchInput && searchButton && modal && modalImg && captionText && wikiLinkContainer && modalThumbnails && closeBtn && prevBtn && nextBtn) {
      const perPage = container.dataset.perPage || '5';
      const taxonId = container.dataset.taxonId;
      const searchType = container.dataset.searchType || 'general';

      function getLargeImageUrl(url: string): string {
        return url.replace('square', 'large');
      }

      function showImage(observationIndex: number, imageIndex: number) {
        if (observationIndex >= 0 && observationIndex < observations.length) {
          const observation = observations[observationIndex];
          if (imageIndex >= 0 && imageIndex < observation.photos.length) {
            const thumbnailUrl = observation.photos[imageIndex].url;
            modalImg.src = getLargeImageUrl(thumbnailUrl);
            const speciesName = observation.species_guess || observation.taxon?.preferred_common_name || observation.taxon?.name || "Unknown Species";
            if (captionText) {
              captionText.innerHTML = `${speciesName}<br>Observed on: ${new Date(observation.observed_on).toLocaleDateString()}`;
            }
            if (wikiLinkContainer) {
              if (observation.taxon?.wikipedia_url) {
                wikiLinkContainer.innerHTML = `<a href="${observation.taxon.wikipedia_url}" target="_blank" rel="noopener noreferrer">Learn more on Wikipedia</a>`;
              } else {
                wikiLinkContainer.innerHTML = '';
              }
            }
            currentObservationIndex = observationIndex;
            currentImageIndex = imageIndex;
            updateModalThumbnails(observation);
          }
        }
      }

      function updateModalThumbnails(observation: Observation) {
        if (modalThumbnails) {
          modalThumbnails.innerHTML = '';
          observation.photos.forEach((photo, index) => {
            const thumb = document.createElement('img');
            thumb.src = photo.url;
            thumb.alt = `Thumbnail ${index + 1}`;
            thumb.className = index === currentImageIndex ? 'modal-thumbnail active' : 'modal-thumbnail';
            thumb.addEventListener('click', () => showImage(currentObservationIndex, index));
            modalThumbnails.appendChild(thumb);
          });
        }
      }

      function showNextImage() {
        const currentObservation = observations[currentObservationIndex];
        if (currentImageIndex < currentObservation.photos.length - 1) {
          showImage(currentObservationIndex, currentImageIndex + 1);
        } else if (currentObservationIndex < observations.length - 1) {
          showImage(currentObservationIndex + 1, 0);
        }
      }

      function showPreviousImage() {
        if (currentImageIndex > 0) {
          showImage(currentObservationIndex, currentImageIndex - 1);
        } else if (currentObservationIndex > 0) {
          const previousObservation = observations[currentObservationIndex - 1];
          showImage(currentObservationIndex - 1, previousObservation.photos.length - 1);
        }
      }

      async function fetchINaturalistData(query: string) {
        if (!query.trim()) {
          if (container) {
            container.innerHTML = 'Please enter a search term.';
          }
          return;
        }

        if (container) {
          container.innerHTML = 'Loading...';
        }

        try {
          let url = `https://api.inaturalist.org/v1/observations?per_page=${perPage}&order=desc&order_by=created_at&photos=true`;
          if (taxonId) {
            url += `&taxon_id=${taxonId}`;
          }
          if (searchType === 'species') {
            url += `&taxon_name=${encodeURIComponent(query)}`;
          } else {
            url += `&q=${encodeURIComponent(query)}`;
          }

          const response = await fetch(url);
          const data = await response.json();

          if (data.results.length === 0) {
            if (container) {
              container.innerHTML = 'No results found.';
            }
            return;
          }

          observations = data.results;

          const grid = document.createElement('div');
          grid.className = 'observation-grid';

          observations.forEach((observation: Observation, index: number) => {
            const speciesName = observation.species_guess || observation.taxon?.preferred_common_name || observation.taxon?.name || "Unknown Species";
            const observationElement = document.createElement('div');
            observationElement.className = 'observation-item';
            const thumbnailUrl = observation.photos[0]?.url || '';
            observationElement.innerHTML = `
              <img src="${thumbnailUrl}" alt="${speciesName}" loading="lazy" class="thumbnail">
              <div class="observation-info">
                <h3>${speciesName}</h3>
                <p>Observed on: ${new Date(observation.observed_on).toLocaleDateString()}</p>
              </div>
            `;
            grid.appendChild(observationElement);

            const thumbnail = observationElement.querySelector('.thumbnail') as HTMLImageElement;
            thumbnail.addEventListener('click', () => {
              if (modal) {
                modal.style.display = "block";
                showImage(index, 0);
              }
            });
          });

          if (container) {
            container.innerHTML = '';
            container.appendChild(grid);
          }
        } catch (error) {
          console.error('Error fetching iNaturalist data:', error);
          if (container) {
            container.innerHTML = 'Error loading iNaturalist data. Please try again.';
          }
        }
      }

      searchButton.addEventListener('click', () => {
        fetchINaturalistData(searchInput.value);
      });

      searchInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
          fetchINaturalistData(searchInput.value);
        }
      });

      closeBtn.onclick = function() {
        if (modal) {
          modal.style.display = "none";
        }
      }

      prevBtn.onclick = showPreviousImage;
      nextBtn.onclick = showNextImage;

      window.onclick = function(event) {
        if (event.target == modal) {
          modal.style.display = "none";
        }
      }
    } else {
      console.error('Could not find necessary elements for iNaturalist data');
    }
  });
</script>

<style>
  .inaturalist-container {
    margin-bottom: 20px;
    width: 100%;
  }
  #search-input {
    padding: 5px;
    margin-right: 10px;
  }
  #search-button {
    padding: 5px 10px;
  }
  .observation-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 25px;
    margin-top: 20px;
    width: 100%;
  }
  .observation-item {
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
  }
  .observation-item:hover {
    transform: translateY(-5px);
  }
  .observation-item img {
    width: 300px;
    height: 300px;
    object-fit: cover;
    cursor: pointer;
  }
  .observation-info {
    padding: 15px;
    flex-grow: 1;
    background-color: #f8f8f8;
  }
  .observation-info h3 {
    margin: 0;
    font-size: 1.1em;
    color: #333;
  }
  .observation-info p {
    margin: 8px 0 0;
    font-size: 0.9em;
    color: #666;
  }
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    padding-top: 50px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.9);
  }
  .modal-content {
    margin: auto;
    display: block;
    width: 80%;
    max-width: 800px;
    max-height: 60vh;
    object-fit: contain;
  }
  #modal-caption {
    margin: auto;
    display: block;
    width: 80%;
    max-width: 700px;
    text-align: center;
    color: #ccc;
    padding: 10px 0;
    height: 50px;
  }
  #modal-wiki-link {
    margin: auto;
    display: block;
    width: 80%;
    max-width: 700px;
    text-align: center;
    padding: 10px 0;
  }
  #modal-wiki-link a {
    color: #4CAF50;
    text-decoration: none;
  }
  #modal-wiki-link a:hover {
    text-decoration: underline;
  }
  #modal-thumbnails {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 20px;
    padding: 0 10%;
  }
  .modal-thumbnail {
    width: 60px;
    height: 60px;
    object-fit: cover;
    cursor: pointer;
    border: 2px solid transparent;
  }
  .modal-thumbnail.active {
    border-color: #fff;
  }
  .close {
    position: absolute;
    top: 15px;
    right: 35px;
    color: #f1f1f1;
    font-size: 40px;
    font-weight: bold;
    transition: 0.3s;
  }
  .close:hover,
  .close:focus {
    color: #bbb;
    text-decoration: none;
    cursor: pointer;
  }
  .prev,
  .next {
    cursor: pointer;
    position: absolute;
    top: 50%;
    width: auto;
    padding: 16px;
    margin-top: -50px;
    color: white;
    font-weight: bold;
    font-size: 20px;
    transition: 0.6s ease;
    border-radius: 0 3px 3px 0;
    user-select: none;
    -webkit-user-select: none;
  }
  .next {
    right: 0;
    border-radius: 3px 0 0 3px;
  }
  .prev:hover,
  .next:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }

  /* Responsive adjustments */
  @media screen and (max-width: 900px) {
    .observation-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
    .observation-item img {
      width: 250px;
      height: 250px;
    }
  }

  @media screen and (max-width: 600px) {
    .observation-grid {
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
    .observation-item img {
      width: 200px;
      height: 200px;
    }
  }
</style>



